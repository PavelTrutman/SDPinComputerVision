% Pavel Trutman
% pavel.trutman@cvut.cz

clear all;

load('data/app_P35Pf_cams.mat');

addpath('../gloptipoly3');
addpath('../yalmip');
addpath('../yalmip/extras');
addpath('../yalmip/solvers');
addpath('../mosek/8/toolbox/r2014a');

n = size(cams{1}.P, 2);
camNum = size(cams, 2);
sol = cell(camNum, n);
times = zeros(camNum, n);

mset('yalmip', true);
mset(sdpsettings('verbose', 0, 'solver', 'mosek'));
mset('verbose', false);

relaxOrder = 6/2;

for j = 1:camNum
  fprintf([num2str(j), ': ']);
  cam = cams{j};
  for i = 1:n
    P = cam.P{i};
    
    [I, a, b, c, d] = coefsMatrix(P);
    timeStart = tic;
    P = msdp(min(mpol(0)), I == 0, relaxOrder);
    [status, ~] = msol(P);
    times(j, i) = toc(timeStart);
    
    if status == 1
      sol{j, i} = [double(a); double(b); double(c); double(d)];
    else
      sol{j, i} = [];
    end
    fprintf('.');
  end
  fprintf('\n');
end

relaxOrders = ones(camNum, n)*relaxOrder*2;

save('data/app_P35Pf_solGloptipoly.mat', 'sol', 'times', 'relaxOrders');

function [I, a, b, c, d] = coefsMatrix(P)

mpol('a', 1);
mpol('b', 1);
mpol('c', 1);
mpol('d', 1);
mpol('I', 9);
I(1) = (P(10, 5) + a*P(10, 1) + b*P(10, 2) + c*P(10, 3) + d*P(10, 4))*(P(6, 5) + a*P(6, 1) + b*P(6, 2) + c*P(6, 3) + d*P(6, 4)) + (P(11, 5) + a*P(11, 1) + b*P(11, 2) + c*P(11, 3) + d*P(11, 4))*(P(7, 5) + a*P(7, 1) + b*P(7, 2) + c*P(7, 3) + d*P(7, 4)) + (P(5, 5) + a*P(5, 1) + b*P(5, 2) + c*P(5, 3) + d*P(5, 4))*(P(9, 5) + a*P(9, 1) + b*P(9, 2) + c*P(9, 3) + d*P(9, 4));
I(2) = (P(10, 5) + a*P(10, 1) + b*P(10, 2) + c*P(10, 3) + d*P(10, 4))*(P(2, 5) + a*P(2, 1) + b*P(2, 2) + c*P(2, 3) + d*P(2, 4)) + (P(11, 5) + a*P(11, 1) + b*P(11, 2) + c*P(11, 3) + d*P(11, 4))*(P(3, 5) + a*P(3, 1) + b*P(3, 2) + c*P(3, 3) + d*P(3, 4)) + (P(1, 5) + a*P(1, 1) + b*P(1, 2) + c*P(1, 3) + d*P(1, 4))*(P(9, 5) + a*P(9, 1) + b*P(9, 2) + c*P(9, 3) + d*P(9, 4));
I(3) = (P(1, 5) + a*P(1, 1) + b*P(1, 2) + c*P(1, 3) + d*P(1, 4))*(P(5, 5) + a*P(5, 1) + b*P(5, 2) + c*P(5, 3) + d*P(5, 4)) + (P(2, 5) + a*P(2, 1) + b*P(2, 2) + c*P(2, 3) + d*P(2, 4))*(P(6, 5) + a*P(6, 1) + b*P(6, 2) + c*P(6, 3) + d*P(6, 4)) + (P(3, 5) + a*P(3, 1) + b*P(3, 2) + c*P(3, 3) + d*P(3, 4))*(P(7, 5) + a*P(7, 1) + b*P(7, 2) + c*P(7, 3) + d*P(7, 4));
I(4) = (P(1, 5) + a*P(1, 1) + b*P(1, 2) + c*P(1, 3) + d*P(1, 4))^2 + (P(2, 5) + a*P(2, 1) + b*P(2, 2) + c*P(2, 3) + d*P(2, 4))^2 + (P(3, 5) + a*P(3, 1) + b*P(3, 2) + c*P(3, 3) + d*P(3, 4))^2 - (P(5, 5) + a*P(5, 1) + b*P(5, 2) + c*P(5, 3) + d*P(5, 4))^2 - (P(6, 5) + a*P(6, 1) + b*P(6, 2) + c*P(6, 3) + d*P(6, 4))^2 - (P(7, 5) + a*P(7, 1) + b*P(7, 2) + c*P(7, 3) + d*P(7, 4))^2; 
I(5) = (P(10, 5) + a*P(10, 1) + b*P(10, 2) + c*P(10, 3) + d*P(10, 4))*(P(3, 5) + a*P(3, 1) + b*P(3, 2) + c*P(3, 3) + d*P(3, 4))^2 - (P(10, 5) + a*P(10, 1) + b*P(10, 2) + c*P(10, 3) + d*P(10, 4))*(P(5, 5) + a*P(5, 1) + b*P(5, 2) + c*P(5, 3) + d*P(5, 4))^2 - (P(10, 5) + a*P(10, 1) + b*P(10, 2) + c*P(10, 3) + d*P(10, 4))*(P(6, 5) + a*P(6, 1) + b*P(6, 2) + c*P(6, 3) + d*P(6, 4))^2 - (P(11, 5) + a*P(11, 1) + b*P(11, 2) + c*P(11, 3) + d*P(11, 4))*(P(2, 5) + a*P(2, 1) + b*P(2, 2) + c*P(2, 3) + d*P(2, 4))*(P(3, 5) + a*P(3, 1) + b*P(3, 2) + c*P(3, 3) + d*P(3, 4)) - (P(11, 5) + a*P(11, 1) + b*P(11, 2) + c*P(11, 3) + d*P(11, 4))*(P(6, 5) + a*P(6, 1) + b*P(6, 2) + c*P(6, 3) + d*P(6, 4))*(P(7, 5) + a*P(7, 1) + b*P(7, 2) + c*P(7, 3) + d*P(7, 4));
I(6) = (P(11, 5) + a*P(11, 1) + b*P(11, 2) + c*P(11, 3) + d*P(11, 4))*(P(5, 5) + a*P(5, 1) + b*P(5, 2) + c*P(5, 3) + d*P(5, 4))^2 - (P(11, 5) + a*P(11, 1) + b*P(11, 2) + c*P(11, 3) + d*P(11, 4))*(P(2, 5) + a*P(2, 1) + b*P(2, 2) + c*P(2, 3) + d*P(2, 4))^2 + (P(11, 5) + a*P(11, 1) + b*P(11, 2) + c*P(11, 3) + d*P(11, 4))*(P(7, 5) + a*P(7, 1) + b*P(7, 2) + c*P(7, 3) + d*P(7, 4))^2 + (P(10, 5) + a*P(10, 1) + b*P(10, 2) + c*P(10, 3) + d*P(10, 4))*(P(2, 5) + a*P(2, 1) + b*P(2, 2) + c*P(2, 3) + d*P(2, 4))*(P(3, 5) + a*P(3, 1) + b*P(3, 2) + c*P(3, 3) + d*P(3, 4)) + (P(10, 5) + a*P(10, 1) + b*P(10, 2) + c*P(10, 3) + d*P(10, 4))*(P(6, 5) + a*P(6, 1) + b*P(6, 2) + c*P(6, 3) + d*P(6, 4))*(P(7, 5) + a*P(7, 1) + b*P(7, 2) + c*P(7, 3) + d*P(7, 4));
I(7) = (P(10, 5) + a*P(10, 1) + b*P(10, 2) + c*P(10, 3) + d*P(10, 4))*(P(1, 5) + a*P(1, 1) + b*P(1, 2) + c*P(1, 3) + d*P(1, 4))*(P(3, 5) + a*P(3, 1) + b*P(3, 2) + c*P(3, 3) + d*P(3, 4)) - (P(11, 5) + a*P(11, 1) + b*P(11, 2) + c*P(11, 3) + d*P(11, 4))*(P(1, 5) + a*P(1, 1) + b*P(1, 2) + c*P(1, 3) + d*P(1, 4))*(P(2, 5) + a*P(2, 1) + b*P(2, 2) + c*P(2, 3) + d*P(2, 4)) + (P(10, 5) + a*P(10, 1) + b*P(10, 2) + c*P(10, 3) + d*P(10, 4))*(P(5, 5) + a*P(5, 1) + b*P(5, 2) + c*P(5, 3) + d*P(5, 4))*(P(7, 5) + a*P(7, 1) + b*P(7, 2) + c*P(7, 3) + d*P(7, 4)) - (P(11, 5) + a*P(11, 1) + b*P(11, 2) + c*P(11, 3) + d*P(11, 4))*(P(5, 5) + a*P(5, 1) + b*P(5, 2) + c*P(5, 3) + d*P(5, 4))*(P(6, 5) + a*P(6, 1) + b*P(6, 2) + c*P(6, 3) + d*P(6, 4));
I(8) = (P(3, 5) + a*P(3, 1) + b*P(3, 2) + c*P(3, 3) + d*P(3, 4))^2*(P(9, 5) + a*P(9, 1) + b*P(9, 2) + c*P(9, 3) + d*P(9, 4)) - (P(6, 5) + a*P(6, 1) + b*P(6, 2) + c*P(6, 3) + d*P(6, 4))^2*(P(9, 5) + a*P(9, 1) + b*P(9, 2) + c*P(9, 3) + d*P(9, 4)) - (P(11, 5) + a*P(11, 1) + b*P(11, 2) + c*P(11, 3) + d*P(11, 4))*(P(1, 5) + a*P(1, 1) + b*P(1, 2) + c*P(1, 3) + d*P(1, 4))*(P(3, 5) + a*P(3, 1) + b*P(3, 2) + c*P(3, 3) + d*P(3, 4)) + (P(10, 5) + a*P(10, 1) + b*P(10, 2) + c*P(10, 3) + d*P(10, 4))*(P(5, 5) + a*P(5, 1) + b*P(5, 2) + c*P(5, 3) + d*P(5, 4))*(P(6, 5) + a*P(6, 1) + b*P(6, 2) + c*P(6, 3) + d*P(6, 4));
I(9) = (P(2, 5) + a*P(2, 1) + b*P(2, 2) + c*P(2, 3) + d*P(2, 4))*(P(3, 5) + a*P(3, 1) + b*P(3, 2) + c*P(3, 3) + d*P(3, 4))*(P(9, 5) + a*P(9, 1) + b*P(9, 2) + c*P(9, 3) + d*P(9, 4)) - (P(11, 5) + a*P(11, 1) + b*P(11, 2) + c*P(11, 3) + d*P(11, 4))*(P(5, 5) + a*P(5, 1) + b*P(5, 2) + c*P(5, 3) + d*P(5, 4))*(P(6, 5) + a*P(6, 1) + b*P(6, 2) + c*P(6, 3) + d*P(6, 4)) - (P(11, 5) + a*P(11, 1) + b*P(11, 2) + c*P(11, 3) + d*P(11, 4))*(P(1, 5) + a*P(1, 1) + b*P(1, 2) + c*P(1, 3) + d*P(1, 4))*(P(2, 5) + a*P(2, 1) + b*P(2, 2) + c*P(2, 3) + d*P(2, 4)) + (P(6, 5) + a*P(6, 1) + b*P(6, 2) + c*P(6, 3) + d*P(6, 4))*(P(7, 5) + a*P(7, 1) + b*P(7, 2) + c*P(7, 3) + d*P(7, 4))*(P(9, 5) + a*P(9, 1) + b*P(9, 2) + c*P(9, 3) + d*P(9, 4));

end